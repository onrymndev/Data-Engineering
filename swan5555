WITH ordered_data AS (
    SELECT 
        t1.PARTY_ID,
        t1.DATA_DATE,
        t4.MODEL_SCORE,
        t5.PAST_DUE_COUNT,
        ROW_NUMBER() OVER (PARTITION BY t1.PARTY_ID ORDER BY t1.DATA_DATE) AS rn
    FROM
        DM_CAD.INP_COM_SME_EARLY_DLQ_MODEL_V2 t1
        LEFT JOIN EDW.PDM_CUSTOMER t2 
            ON t1.PARTY_ID = t2.PARTY_ID 
            AND t1.DATA_DATE + 1 = t2.DATA_DATE
        INNER JOIN DM_CAD.OUT_COM_SME_EARLY_DLQ_MODEL_V2 t4 
            ON t1.PARTY_ID = t4.PARTY_ID 
            AND t1.DATA_DATE = t4.DATA_DATE
        LEFT JOIN EDW.PDM_CUSTOMER t5 
            ON t1.PARTY_ID = t5.PARTY_ID 
            AND t5.DATA_DATE BETWEEN t1.DATA_DATE + 30 AND t1.DATA_DATE + 35
    WHERE 
        t2.PAST_DUE_COUNT = 1
),
recursive_filter (
    PARTY_ID, 
    DATA_DATE, 
    MODEL_SCORE, 
    PAST_DUE_COUNT,
    LAST_ACCEPTED_DATE,
    RN
) AS (
    -- Anchor: First row per party
    SELECT 
        PARTY_ID, 
        DATA_DATE, 
        MODEL_SCORE, 
        PAST_DUE_COUNT,
        DATA_DATE AS LAST_ACCEPTED_DATE,
        RN
    FROM ordered_data
    WHERE RN = 1

    UNION ALL

    -- Recursive step: add next row if it's >=30 days after last accepted date
    SELECT 
        od.PARTY_ID, 
        od.DATA_DATE, 
        od.MODEL_SCORE, 
        od.PAST_DUE_COUNT,
        od.DATA_DATE AS LAST_ACCEPTED_DATE,
        od.RN
    FROM ordered_data od
    JOIN recursive_filter rf
        ON od.PARTY_ID = rf.PARTY_ID
        AND od.RN = rf.RN + 1
        AND od.DATA_DATE >= rf.LAST_ACCEPTED_DATE + 30
)
SELECT 
    PARTY_ID,
    DATA_DATE,
    MODEL_SCORE,
    PAST_DUE_COUNT
FROM recursive_filter
ORDER BY PARTY_ID, DATA_DATE;