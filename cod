import pandas as pd
import numpy as np
from tqdm import tqdm

# ---- Step 1: Define tenor to offset conversion ----
def tenor_to_offset(tenor):
    num = int(''.join(filter(str.isdigit, tenor)))
    unit = ''.join(filter(str.isalpha, tenor))
    if unit == 'g':  # gün (day)
        return pd.Timedelta(days=num)
    elif unit == 'a':  # ay (month)
        return pd.DateOffset(months=num)
    elif unit == 'y':  # yıl (year)
        return pd.DateOffset(years=num)
    else:
        raise ValueError(f"Unknown tenor format: {tenor}")

# ---- Step 2: Create mapping of column names to offsets ----
tenor_offsets = {col: tenor_to_offset(col) for col in df.columns}

# ---- Step 3: Interpolation function ----
def interpolate_row(start_date, row, n_days=1300):
    known_dates = [start_date + tenor_offsets[col] for col in df.columns]
    known_values = row.values.astype(float)
    known_series = pd.Series(data=known_values, index=pd.to_datetime(known_dates)).sort_index()

    # Generate future business days from the start_date
    target_dates = pd.date_range(start=start_date, periods=n_days, freq='B')

    # Combine and interpolate
    full_index = known_series.index.union(target_dates).sort_values()
    interpolated = known_series.reindex(full_index).interpolate(method='time')
    result_series = interpolated.loc[target_dates]

    # Return single-row DataFrame with date columns
    return pd.DataFrame([result_series.values], columns=result_series.index)

# ---- Step 4: Loop with tqdm to track progress ----
interpolated_dfs = []

for idx, row in tqdm(df.iterrows(), total=len(df), desc="Interpolating rows"):
    interpolated_row_df = interpolate_row(idx, row)
    interpolated_row_df.index = [idx]  # name the row using its original date
    interpolated_dfs.append(interpolated_row_df)

# ---- Example: First one-row DataFrame ----
print(interpolated_dfs[0].head())