import pandas as pd
from tqdm import tqdm

# Your original tenor columns in the dataframe
tenor_columns = [
    '1g', '2g', '3g', '7g', '15g',
    '1a', '2a', '3a', '4a', '6a', '9a',
    '1y', '2y', '3y', '5y'
]

# Map tenor strings to pd.DateOffset objects
tenor_offsets = {
    '1g': pd.DateOffset(days=1),
    '2g': pd.DateOffset(days=2),
    '3g': pd.DateOffset(days=3),
    '7g': pd.DateOffset(days=7),
    '15g': pd.DateOffset(days=15),
    '1a': pd.DateOffset(months=1),
    '2a': pd.DateOffset(months=2),
    '3a': pd.DateOffset(months=3),
    '4a': pd.DateOffset(months=4),
    '6a': pd.DateOffset(months=6),
    '9a': pd.DateOffset(months=9),
    '1y': pd.DateOffset(years=1),
    '2y': pd.DateOffset(years=2),
    '3y': pd.DateOffset(years=3),
    '5y': pd.DateOffset(years=5),
}

def interpolate_row(start_date, row, horizon_years=5):
    # Map tenor columns to exact dates
    known_dates = [start_date + tenor_offsets[col] for col in tenor_columns]
    known_dates = pd.to_datetime(known_dates).normalize()
    
    known_values = row[tenor_columns].values.astype(float)
    
    # Known points series
    known_series = pd.Series(data=known_values, index=known_dates).sort_index()

    # Generate business day index up to 5 years
    end_date = start_date + pd.DateOffset(years=horizon_years)
    bdays = pd.date_range(start=start_date.normalize(), end=end_date.normalize(), freq='B')

    # Full index includes business days + known tenor dates
    full_index = bdays.union(known_series.index).sort_values()

    # Reindex series to full index to prepare for interpolation
    full_series = known_series.reindex(full_index)

    # Linear interpolation in time dimension, only between known points
    interpolated = full_series.interpolate(method='time', limit_area='inside')

    # Keep only business days
    interpolated = interpolated.loc[bdays]

    # Force known original values back in case of numerical issues
    interpolated.update(known_series)

    # Return single-row DataFrame with business days as columns
    return pd.DataFrame([interpolated.values], columns=interpolated.index)

# Example usage: process entire df
# Assuming your dataframe is called `df` with a DateTimeIndex and tenor columns

results = []
for date, row in tqdm(df.iterrows(), total=len(df)):
    interp_df = interpolate_row(date, row)
    # Optionally add a column or attribute to identify row date if needed here
    results.append(interp_df)

# results is a list of one-row DataFrames with columns as business day dates starting at each row's date

# Example: concat all results into a big dataframe (optional)
# final_df = pd.concat(results, ignore_index=True)