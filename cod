import pandas as pd
from tqdm import tqdm

# Your tenor columns
tenor_columns = [
    '1g', '2g', '3g', '7g', '15g',
    '1a', '2a', '3a', '4a', '6a', '9a',
    '1y', '2y', '3y', '5y'
]

# Map tenors to proper pd.DateOffset or BDay (business day offset)
from pandas.tseries.offsets import BDay, MonthEnd, YearEnd

tenor_offsets = {
    '1g': BDay(1),
    '2g': BDay(2),
    '3g': BDay(3),
    '7g': BDay(7),
    '15g': BDay(15),
    '1a': pd.DateOffset(months=1),
    '2a': pd.DateOffset(months=2),
    '3a': pd.DateOffset(months=3),
    '4a': pd.DateOffset(months=4),
    '6a': pd.DateOffset(months=6),
    '9a': pd.DateOffset(months=9),
    '1y': pd.DateOffset(years=1),
    '2y': pd.DateOffset(years=2),
    '3y': pd.DateOffset(years=3),
    '5y': pd.DateOffset(years=5),
}

def interpolate_row(start_date, row, horizon_years=5):
    # Compute the known dates using business days/months/years
    known_dates = [(start_date + tenor_offsets[col]).normalize() for col in tenor_columns]
    known_values = row[tenor_columns].values.astype(float)

    known_series = pd.Series(data=known_values, index=known_dates).sort_index()

    # Define full business day index from start date to horizon
    end_date = (start_date + pd.DateOffset(years=horizon_years)).normalize()
    bdays = pd.date_range(start=start_date.normalize(), end=end_date, freq='B')

    # Combine known dates and business days
    full_index = bdays.union(known_series.index).sort_values()

    # Reindex for interpolation
    full_series = known_series.reindex(full_index)

    # Interpolate linearly in time
    interpolated = full_series.interpolate(method='time', limit_area='inside')

    # Restrict to business days only
    interpolated = interpolated.loc[bdays]

    # Re-insert original known values to ensure they're unchanged
    interpolated.update(known_series)

    # Return one-row DataFrame with business days as columns
    return pd.DataFrame([interpolated.values], columns=interpolated.index)

# Assuming your dataframe is called df and indexed by date
results = []
for date, row in tqdm(df.iterrows(), total=len(df)):
    interpolated_row = interpolate_row(date, row)
    results.append(interpolated_row)